{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,cAAU,EAAE;AACR,kBAAU,EAAE,EAAE,CAAC,MAAM;AACrB,gBAAQ,EAAE,EAAE,CAAC,QAAQ;AACrB,iBAAS,EAAE,CAAC;AACZ,kBAAU,EAAE,EAAE,CAAC,IAAI;KACtB;;AAID,QAAI,EAAE,gBAAU,EAEf;;;AAID,UAAM,EAAE,kBAAY;AAChB,YAAI,CAAC,QAAQ,GAAG,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC;AAClC,YAAI,CAAC,SAAS,GAAG,CAAC,CAAC;AACnB,YAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;;AAE3C,aAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,EAAC;AACnC,gBAAI,IAAI,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC3C,gBAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SAC3B;KACJ;;;AAID,oBAAgB,EAAE,4BAAU;AACxB,YAAI,IAAI,GAAG,IAAI,CAAC;;;AAGhB,YAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,EAAC;AACxB,gBAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;SAC9B,MAAI;AACD,gBAAI,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC1C;;;AAGD,YAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;;;KAGlC;;;AAGD,qBAAiB,EAAE,2BAAS,IAAI,EAAC;AAC7B,YAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,SAAS,EAAC;AACtC,gBAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;SACvB,MAAI;;AAED,gBAAI,CAAC,SAAS,GAAG,GAAG,CAAC;AACrB,gBAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;AAC3B,gBAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAChC;KACJ;;CAOJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        firePrefab: cc.Prefab,  //场景上增加预置资源属性\r\n        firePool: cc.NodePool,//对象池\r\n        initCount: 5, //对象池最大存储数量\r\n        parentNode: cc.Node //决定在哪个节点上运行\r\n    },\r\n\r\n    \r\n    \r\n    init: function(){\r\n        \r\n    },\r\n    \r\n    \r\n    //场景加载  创建对象池  加载挂在Canvas下的  火球预置资源\r\n    onLoad: function () {\r\n        this.firePool = new cc.NodePool();\r\n        this.initCount = 5;      //let 类型是js的块级作用域\r\n        this.fireSpeed = this.firePrefab.fireSpeed;     //记录fire初速度\r\n        \r\n        for(let i = 0; i < this.initCount; i++){\r\n            let fire = cc.instantiate(this.firePrefab);  //创建火球节点\r\n            this.firePool.put(fire); //将火球节点加入对象池\r\n        }\r\n    },\r\n\r\n    \r\n    //从对象池创建新的\r\n    createPrefabNode: function(){\r\n        let node = null;\r\n        \r\n        //先检查对象池是否充足   不足则创建新的\r\n        if(this.firePool.size() > 0){\r\n            node = this.firePool.get();\r\n        }else{\r\n            node = cc.instantiate(this.firePrefab);\r\n        }\r\n        \r\n        // node.parent = parentNode;  //将预制对象节点加入\r\n        this.parentNode.addChild(node);\r\n        // node.getComponent('fire').init(); //获取节点上指定类型的组件，如果节点有附加指定类型的组件，则返回，如果没有则为空。\r\n                                                //传入参数也可以是脚本的名称。\r\n    },\r\n    \r\n    //回收对象\r\n    releasePrefabNode: function(fire){\r\n        if(this.firePool.size() >= this.initCount){\r\n            fire.node.destroy();\r\n        }else{\r\n            //初始化fire数据\r\n            fire.fireSpeed = 200;\r\n            fire.node.setPosition(0,0);\r\n            this.firePool.put(fire.node);  \r\n        }\r\n    },\r\n    \r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n});\r\n"
  ]
}